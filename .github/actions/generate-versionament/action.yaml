name: Versionament
inputs:
  aws_account:
    description: 'AWS accounts JSON'
    required: true

  aws_region:
    description: 'Aws region'
    required: true
    default: 'us-east-1'

  token:
    description: 'GitHub token'
    required: true

  terraform_directory:
    required: false
    type: string
    default: ''
runs:
  using: composite
  steps:

  - name: Checkout sandbox branch
    uses: actions/checkout@v4
    with:
      ref: "${{ github.ref_name }}"
      fetch-depth: 0

  - name: configure aws credentials
    uses: aws-actions/configure-aws-credentials@v4
    with:
      role-to-assume: arn:aws:iam::${{ inputs.aws_account }}:role/github-actions-role
      role-session-name: github-actions-role
      aws-region: ${{ inputs.aws_region }}


  - name: "Generate Terraform file"
    shell: bash
    run: |
      # Buscar parâmetros diretamente e processar em um único passo
      aws ssm get-parameters-by-path --path "/versions/${{ github.event.repository.name }}/" --recursive --with-decryption --region us-east-1 > parameters.json
      
      # Iniciar o arquivo Terraform
      echo 'variable "versionament" {' > versions.tf
      echo '  type = object({' >> versions.tf
      
      # Processar os parâmetros para gerar as definições de tipo
      jq -r '.Parameters[] | .Name' parameters.json | while read -r name; do
      # Extrair o sufixo do nome (após a última barra)
      suffix=$(echo "$name" | awk -F'/' '{print $NF}')
      echo "    $suffix = string" >> versions.tf
      done
      
      echo '  })' >> versions.tf
      echo '  default = {' >> versions.tf
      
      # Processar os parâmetros para gerar os valores padrão
      jq -r '.Parameters[] | .Name + "=" + .Value' parameters.json | while read -r line; do
      # Extrair o sufixo do nome e o valor
      name=$(echo "$line" | cut -d'=' -f1)
      value=$(echo "$line" | cut -d'=' -f2-)
      suffix=$(echo "$name" | awk -F'/' '{print $NF}')
      echo "    $suffix = \"$value\"" >> versions.tf
      done
      
      echo '  }' >> versions.tf
      echo '}' >> versions.tf

  - name: "Move Terraform file"
    shell: bash
    if: ${{ inputs.terraform_directory != '' }}
    run: mv versions.tf "${{ inputs.terraform_directory }}/versions.tf"


  - name: Create branch with inverted timestamp
    shell: bash
    run: |
      git config user.name "GitHub Actions"
      git config user.email "actions@github.com"
      
      TIMESTAMP=$(date -u +"%Y%m%d_%H%M%S")
      INVERTED_TIMESTAMP=$(echo $TIMESTAMP | tr '_' '-')
      BRANCH_NAME="release-${INVERTED_TIMESTAMP}"
      
      git checkout -b $BRANCH_NAME
      git add terraform/versions.tf
      git commit -m "Update versions.tf with latest parameter values"
      git push origin $BRANCH_NAME
      echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

  - name: Create Pull Request
    uses: peter-evans/create-pull-request@v5
    with:
      token: ${{ inputs.token }}
      base: sandbox
      branch: ${{ env.BRANCH_NAME }}
      title: "Update versions.tf with latest parameter values"
      body: |
        This PR updates the versions.tf file with the latest parameter values from AWS SSM Parameter Store.

        **Changes:**
        - Updated version values for all components

        This PR was automatically generated by GitHub Actions.
      draft: false
