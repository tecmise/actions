name: Expose Endpoints in API Gateway
inputs:
  routes_file:
    description: 'Caminho do arquivo JSON de configuração das rotas para API Gateway'
    required: false
    default: ''
  aws_region:
    description: "'AWS Region to deploy the API Gateway'"
    required: false
    default: 'us-east-1'
  bucket_name:
    description: "'S3 Bucket name for Terraform state'"
    required: true
  port:
    description: "'Port for the target group'"
    required: false
    default: 0
  protocol:
    description: "'Protocol for the target group'"
    required: false
    default: 'HTTP'
  vpc_id:
    description: "'VPC ID for the target group'"
    required: false
    default: ''

  health_check_protocol:
    description: "'Health Check Protocol for the target group'"
    required: false
    default: "HTTP"
  health_check_port:
    description: "'Health Check Port for the target group'"
    required: false
    default: ""
  health_check_interval:
    description: "'Health Check Interval for the target group'"
    required: false
    default: "30"
  health_check_timeout:
    description: "'Health Check Timeout for the target group'"
    required: false
    default: "5"
  health_check_healthy_threshold:
    description: "'Health Check Healthy Threshold for the target group'"
    required: false
    default: "2"
  health_check_unhealthy_threshold:
    description: "'Health Check Unhealthy Threshold for the target group'"
    required: false
    default: "2"
  health_check_path:
    description: "'Health Check Path for the target group'"
    required: false
    default: "/health"
  health_check_matcher:
    description: "'Health Check Matcher for the target group'"
    default: "200"


runs:
  using: composite
  steps:
    - name: Create Folder for API Gateway
      shell: bash
      run: mkdir -p ${{ github.run_number }}

    - name: Copy Routes File
      shell: bash
      run: |
        if [ -n "${{ inputs.routes_file }}" ]; then
          cp "${{ inputs.routes_file }}" ${{ github.run_number }}/routes.json
        else
          echo "No routes file provided, skipping copy."
        fi


    - name: Execute API Gateway Script
      shell: bash
      working-directory: ${{ github.run_number }}
      run: |       
        # Executa o script Python com o JSON como argumento
        python ${{ github.action_path }}/../../scripts/terraform/api-gateway.py "$(cat routes.json)"
        ls -ltra

    - name: Creating provider.tf
      shell: bash
      working-directory: ${{ github.run_number }}
      run: |       
        cat > provider.tf <<EOF
        provider "aws" {
          region = "${{ inputs.aws_region }}"
        }
        EOF

    - name: Creating backend.tf
      shell: bash
      working-directory: ${{ github.run_number }}
      run: |       
        cat > backend.tf <<EOF
        terraform {
          required_providers {
            aws = {
              source  = "hashicorp/aws"
              version = "5.81.0"
            }
          }
          backend "s3" {
            key    = "api-gateway-routes/${{ github.event.repository.name }}.tfstate"
            bucket = "${{ inputs.bucket_name }}"
            region = "us-east-1"
          }
        }
        EOF

    - name: Creating variables.tf
      shell: bash
      working-directory: ${{ github.run_number }}
      run: |
        cat > variables.tf <<EOF
        variable "root_resource_id" {
          type = string
        }

        variable "rest_api_id" {
          type = string
        }

        variable "invoke_uri" {
          type = string
        }

        variable "authorizer_id" {
          type = string
        }

        variable "cors_origin_domain" {
          type = string
        }

        variable "application_name" {
          type    = string
          default = "${{ github.event.repository.name }}"
        }
        EOF
        
    - name: Creating target-group.tf
      shell: bash
      working-directory: ${{ github.run_number }}
      if: ${{ inputs.port != 0 && inputs.vpc_id != '' }}
      run: |
        cat > target-group.tf <<EOF
          resource "aws_lb_target_group" "default" {
              name        = "${{ github.event.repository.name }}"
              port        = ${{ inputs.port }}
              protocol    = "${{ inputs.protocol }}"
              vpc_id      = "${{ inputs.vpc_id }}"
              target_type = "ip"
              tags = {
                  application = "${{ github.event.repository.name }}"
              }
              health_check {
                  protocol            = "${{ inputs.health_check_protocol }}"
                  port                = "${{ inputs.health_check_port }}"
                  interval            = ${{ inputs.health_check_interval }}
                  timeout             = ${{ inputs.health_check_timeout }}
                  healthy_threshold   = ${{ inputs.health_check_healthy_threshold }}
                  unhealthy_threshold = ${{ inputs.health_check_unhealthy_threshold }}
                  path                = "${{ inputs.health_check_path }}"
                  matcher             = "${{ inputs.health_check_matcher }}"
              }
          }
        EOF
        


        
