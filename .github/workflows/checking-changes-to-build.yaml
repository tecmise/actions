name: Checking Changes

on:
  workflow_call:
    inputs:
      paths:
        description: 'Paths to verify content'
        required: true
        type: string
    outputs:
      has_changes:
        value: ${{ jobs.checking-last-version.outputs.has_changes }}
        description: 'Content Hash'

jobs:
  loading-hash:
    name: Generating hashcode
    runs-on: ubuntu-latest
    outputs:
      content: ${{ steps.generate_hash.outputs.content }}
    steps:

    - name: Checkout script repository
      uses: actions/checkout@v4
      with:
        repository: 'tecmise/actions'
        path: code

    - id: generate_hash
      name: Generate Hash Token
      run: |
        hash=$(python code/.github/scripts/content_check.py "${{ inputs.paths }}")
        echo "content=$hash" >> $GITHUB_OUTPUT

    - name: Remove code directory
      run: rm -rf code

  checking-last-version:
    name: Checking current version
    runs-on: ubuntu-latest
    needs: loading-hash
    outputs:
      has_changes: ${{ steps.check_version.outputs.has_change }}
    steps:

    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ fromJson(vars.AWS_ACCOUNTS).s4s[github.ref_name] }}:role/github-actions-role
        role-session-name: github-actions-role
        aws-region: 'us-east-1'

    - name: "Generate Terraform file"
      shell: bash
      id: last_version
      run: |
        aws ssm get-parameters-by-path --path "/versions/${{ github.event.repository.name }}" --region us-east-1 > parameters.json
        echo "content=$(cat parameters.json)" >> $GITHUB_OUTPUT
        rm -rf parameters.json

    - name: "Check if parameters are empty or different from hash"
      shell: bash
      id: check_version
      run: |
        CURRENT_HASH="${{ needs.loading-hash.outputs.content }}"
        echo "Current hash: $CURRENT_HASH"
        
        PARAM_COUNT=$(jq '.Parameters | length' parameters.json)
        echo "Parameter count: $PARAM_COUNT"
        
        if [ "$PARAM_COUNT" -eq 0 ]; then
          echo "Parameters are empty, setting has_change=true"
          echo "has_change=true" >> $GITHUB_OUTPUT
        else
          # Get the value of the first parameter
          PARAM_VALUE=$(jq -r '.Parameters[0].Value' parameters.json)
          echo "Parameter value: $PARAM_VALUE"
          
          # Compare with current hash
          if [ "$PARAM_VALUE" == "$CURRENT_HASH" ]; then
            echo "No changes detected, setting has_change=false"
            echo "has_change=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected, setting has_change=true"
            echo "has_change=true" >> $GITHUB_OUTPUT
          fi
        fi