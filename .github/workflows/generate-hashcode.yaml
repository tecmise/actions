name: Checking Changes

on:
  workflow_call:
    inputs:
      aws_environment:
        description: 'Environment for the workflow'
        required: false
        type: string
        default: 's4s'
      aws_region:
        required: false
        type: string
        default: 'us-east-1'

    outputs:
      has_changes:
        value: ${{ jobs.checking-last-version.outputs.has_changes }}
        description: 'Content Hash'
      hashcode:
        value: ${{ jobs.loading-hash.outputs.content }}
        description: 'Content Hash'

jobs:
  loading-hash:
    name: Generating hashcode
    runs-on: "ubuntu-latest"
    outputs:
      content: ${{ steps.generate_hash.outputs.content }}
    steps:

    - name: Checkout script repository
      uses: actions/checkout@v4

    - name: Checkout script repository
      uses: actions/checkout@v4
      with:
        repository: 'tecmise/actions'
        path: code_internal

    - name: Rename md5_calculator.py
      run: mv code_internal/.github/scripts/md5_calculator.py md5_calculator.py

    - name: Remove code directory
      run: rm -rf code_internal

    - name: Instalar Python via yum
      run: |
        sudo yum update -y
        sudo yum install -y python3 python3-pip
        sudo ln -sf $(which python3) /usr/bin/python



    - id: generate_hash
      name: Generate Hash Token
      run: |
        
        JSON_CONFIG=$(cat << EOF
        {
          "ignore_path": ["terraform", ".github", ".idea", ".git", ".gitignore", "md5_calculator.py"],
          "source": "."
        }
        EOF
        )
        hash=$(python md5_calculator.py "$JSON_CONFIG")
        echo "Generated hash: $hash"
        echo "content=$hash" >> $GITHUB_OUTPUT

    - name: Remove code directory
      run: rm -rf md5_calculator.py

  checking-last-version:
    name: Checking current version
    runs-on: "ubuntu-latest"
    needs: loading-hash
    outputs:
      has_changes: ${{ steps.check_version.outputs.has_changes }}
    steps:

    - name: Authenticate on AWS with ${{ inputs.aws_environment }} environment
      uses: tecmise/actions/.github/actions/aws-authenticate@main
      with:
        category: ${{ inputs.aws_environment }}
        aws_accounts: ${{ vars.AWS_ACCOUNTS }}
        aws_region: ${{ inputs.aws_region }}


    - name: "Get parameters from SSM"
      id: last_version
      run: |
        # Salvar a saída do comando em um arquivo
        aws ssm get-parameters-by-path --path "/versions/${{ github.event.repository.name }}" --region us-east-1 > parameters.json
        
        # Exibir o conteúdo para debug
        cat parameters.json
        
        # Escapar corretamente o conteúdo para o GITHUB_OUTPUT
        # Usando a sintaxe de delimitador para valores multilinhas do GitHub Actions
        echo "content<<EOF" >> $GITHUB_OUTPUT
        cat parameters.json >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT


    - name: "Check if parameters are empty or different from hash"
      id: check_version
      run: |
        CURRENT_HASH="${{ needs.loading-hash.outputs.content }}"
        echo "Current hash: $CURRENT_HASH"
        
        # Construir o nome completo do parâmetro que estamos procurando
        PARAM_NAME="/versions/${{ github.event.repository.name }}/hashcode"
        echo "Looking for parameter: $PARAM_NAME"
        
        # Verificar se o parâmetro existe usando jq
        PARAM_EXISTS=$(jq --arg name "$PARAM_NAME" '.Parameters[] | select(.Name == $name) | length' parameters.json 2>/dev/null || echo "0")
        
        if [ "$PARAM_EXISTS" == "0" ] || [ -z "$PARAM_EXISTS" ]; then
          echo "Parameter $PARAM_NAME not found, setting has_changes=true"
          echo "has_changes=true" >> $GITHUB_OUTPUT
        else
          # Obter o valor do parâmetro específico
          PARAM_VALUE=$(jq --arg name "$PARAM_NAME" -r '.Parameters[] | select(.Name == $name) | .Value' parameters.json)
          echo "Parameter value: $PARAM_VALUE"
          
          # Comparar com o hash atual
          if [ "$PARAM_VALUE" == "$CURRENT_HASH" ]; then
            echo "No changes detected, setting has_changes=false"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected, setting has_changes=true"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
        fi