name: Versionament

on:
  workflow_call:
    inputs:
      versionament:
        description: 'Versionament parameters'
        required: true
        type: string
      terraform_directory:
        required: false
        type: string
        default: '.'

jobs:
  generate-versionament:
    name: Generate
    environment: ${{ github.ref_name }}
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.create-branch.outputs.branch_name }}
    steps:
    - name: Checkout branch
      uses: actions/checkout@v4
      with:
        ref: "${{ github.ref_name }}"
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        persist-credentials: true


    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ fromJson(vars.AWS_ACCOUNTS).s4s[github.ref_name] }}:role/github-actions-role
        role-session-name: github-actions-role
        aws-region: 'us-east-1'

    - name: "Generate Terraform file"
      shell: bash
      run: |
        # Buscar parÃ¢metros diretamente e processar em um Ãºnico passo
        aws ssm get-parameters-by-path --path "/versions/${{ github.event.repository.name }}/" --recursive --with-decryption --region us-east-1 > parameters.json
        
        # Iniciar o arquivo Terraform
        echo 'variable "versionament" {' > versions.tf
        echo '  type = string' >> versions.tf
        echo '  default = "${{inputs.versionament}}"' >> versions.tf
        echo '}' >> versions.tf
        rm -rf parameters.json

    - name: Create branch with inverted timestamp
      id: create-branch
      shell: bash
      run: |
        TIMESTAMP=$(date -u +"%Y%m%d_%H%M%S")
        INVERTED_TIMESTAMP=$(echo $TIMESTAMP | tr '_' '-')
        BRANCH_NAME="release-${INVERTED_TIMESTAMP}"
        echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT


    - name: Create branch with inverted timestamp
      shell: bash
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git checkout -b ${{ steps.create-branch.outputs.branch_name }}

    - name: Show Before
      shell: bash
      run: |
        cat "${{ inputs.terraform_directory }}/versionament.tf"

    - name: Move Terraform file
      shell: bash
      run: |
        mv versions.tf "${{ inputs.terraform_directory }}/versionament.tf"

    - name: Show After
      shell: bash
      run: |
        cat "${{ inputs.terraform_directory }}/versionament.tf"

    - name: Status
      shell: bash
      run: |
        git status

    - name: Create branch with inverted timestamp
      shell: bash
      run: |
        git add -A
        git commit -m "Update versions.tf with latest parameter values"
        git push --set-upstream origin ${{ steps.create-branch.outputs.branch_name }}

  open-pr:
    name: Open PR
    environment: ${{ github.ref_name }}
    runs-on: ubuntu-latest
    needs: generate-versionament
    steps:
    - name: Create Pull Request
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      id: create_pr
      run: |
        PR_URL=$(gh pr create \
          --base ${{ github.ref_name }} \
          --repo ${{ github.repository }}) \
          --head ${{ needs.generate-versionament.outputs.branch_name }} \
          --title "ðŸš€ Release Automation: v${{ inputs.versionament }}" \
          --body "## ðŸš€ Automated Release Update
              ### VersÃ£o: \`${{ inputs.versionament }}\`
          
              Esta Pull Request foi gerada automaticamente pelo pipeline de CD e contÃ©m:
          
              - âœ… AtualizaÃ§Ã£o de versÃ£o para \`${{ inputs.versionament }}\`
              - âœ… ConfiguraÃ§Ãµes atualizadas para implantaÃ§Ã£o
              - âœ… Artefatos prontos para produÃ§Ã£o
              
              ---
              *Gerado por GitHub Actions em $(date -u +"%Y-%m-%dT%H:%M:%SZ")*" \
              
              echo "PR_URL=$PR_URL" >> $GITHUB_OUTPUT
              
              # Extrair o nÃºmero do PR do URL
              PR_NUMBER=$(echo $PR_URL | sed -E 's|.*/pull/([0-9]+).*|\1|')
              echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_OUTPUT
              
              echo "Pull Request criado: $PR_URL (PR #$PR_NUMBER)"
              
              # Configurar a PR para deletar a branch apÃ³s o merge
              gh api repos/${{ github.repository }}/pulls/$PR_NUMBER -X PATCH -f auto_merge=true -f delete_branch_on_merge=true || echo "NÃ£o foi possÃ­vel configurar auto-merge e exclusÃ£o de branch"

    - name: Notify Discord Webhook
      if: steps.create_pr.outputs.PR_NUMBER != ''
      run: |
        # Criar um arquivo temporÃ¡rio com o JSON
        cat > discord_payload.json << EOF
        {
          "embeds": [
            {
              "title": "ðŸš€ Nova Pull Request de Release Criada",
              "description": "Uma nova PR de release foi criada automaticamente pelo pipeline de CD.",
              "color": 3447003,
              "fields": [
                {
                  "name": "RepositÃ³rio",
                  "value": "${{ github.repository }}",
                  "inline": true
                },
                {
                  "name": "PR #",
                  "value": "[#${{ steps.create_pr.outputs.PR_NUMBER }}](${{ steps.create_pr.outputs.PR_URL }})",
                  "inline": true
                },
                {
                  "name": "Branch",
                  "value": "${{ needs.generate-versionament.outputs.branch_name }}",
                  "inline": true
                },
                {
                  "name": "VersÃ£o",
                  "value": "${{ needs.generate-versionament.outputs.version }}",
                  "inline": true
                },
                {
                  "name": "Hash",
                  "value": "${{ needs.generate-hash.outputs.content }}",
                  "inline": true
                }
              ],
              "footer": {
                "text": "GitHub Actions CD Pipeline â€¢ $(date -u +"%Y-%m-%d %H:%M UTC")"
              }
            }
          ]
        }
        EOF
        
        # Enviar o arquivo para o webhook
        curl -X POST ${{ secrets.DISCORD_NOTIFIER_URL }} \
          -H "Content-Type: application/json" \
          -d @discord_payload.json