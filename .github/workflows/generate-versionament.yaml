name: Versionament

on:
  workflow_call:
    inputs:
      versionament:
        description: 'Versionament parameters'
        required: true
        type: string
      terraform_directory:
        required: false
        type: string
        default: '.'
      aws_environment:
        description: 'Environment for the workflow'
        required: false
        type: string
        default: 's4s'
      aws_region:
        required: false
        type: string
        default: 'us-east-1'
jobs:
  generate-versionament:
    name: Generate
    environment: ${{ github.ref_name }}
    runs-on: "ubuntu-latest"
    steps:
    - name: Checkout branch
      uses: actions/checkout@v4
      with:
        ref: "${{ github.ref_name }}"
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        persist-credentials: true


    - name: Authenticate on AWS
      uses: tecmise/actions/.github/actions/aws-authenticate@main
      with:
        category: ${{ inputs.aws_environment }}
        aws_accounts: ${{ vars.AWS_ACCOUNTS }}
        aws_region: ${{ inputs.aws_region }}


    - name: "Generate Terraform file"
      shell: bash
      run: |
        # Buscar parÃ¢metros diretamente e processar em um Ãºnico passo
        aws ssm get-parameters-by-path --path "/versions/${{ github.event.repository.name }}/" --recursive --with-decryption --region us-east-1 > parameters.json
        
        # Iniciar o arquivo Terraform
        echo 'variable "versionament" {' >> versions.tf
        echo '  type = string' >> versions.tf
        echo '  default = "${{inputs.versionament}}"' >> versions.tf
        echo '}' >> versions.tf
        rm -rf parameters.json


    - name: Checkout or Create Branch and Merge
      shell: bash
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
        # Nome da branch de destino
        TARGET_BRANCH="delivery/${{ github.ref_name }}"
        
        # Verifica se a branch remota existe
        if git ls-remote --heads origin $TARGET_BRANCH | grep -q $TARGET_BRANCH; then
          echo "Branch $TARGET_BRANCH jÃ¡ existe. Fazendo checkout e merge..."
          
          # Checkout da branch existente
          git fetch origin $TARGET_BRANCH
          git checkout $TARGET_BRANCH
          
          # Atualiza a branch local com a remota
          git pull origin $TARGET_BRANCH
          
          # Merge com a branch de referÃªncia
          git merge origin/${{ github.ref_name }} --no-edit -m "Merge branch '${{ github.ref_name }}' into $TARGET_BRANCH via GitHub Actions"
        else
          echo "Branch $TARGET_BRANCH nÃ£o existe. Criando nova branch..."
          
          # Cria uma nova branch a partir da branch de referÃªncia
          git checkout -b $TARGET_BRANCH
        fi
        echo "Agora trabalhando na branch: $(git branch --show-current)"

    - name: Move Terraform file
      shell: bash
      run: |
        mv versions.tf "${{ inputs.terraform_directory }}/versionament.tf"

    - name: Status
      shell: bash
      run: |
        git status

    - name: Commit and Push Changes
      shell: bash
      run: |
        # Adiciona todas as alteraÃ§Ãµes
        git add -A
        
        # Verifica se hÃ¡ alteraÃ§Ãµes para commit
        if git diff --staged --quiet; then
          echo "Nenhuma alteraÃ§Ã£o para commit."
          exit 0
        fi
        
        # Faz o commit das alteraÃ§Ãµes
        git commit -m "Update versions.tf with latest parameter values"
        
        # ObtÃ©m o nome da branch atual
        CURRENT_BRANCH=$(git branch --show-current)
        echo "Branch atual: $CURRENT_BRANCH"
        
        # Primeiro tenta um push normal
        if git push origin $CURRENT_BRANCH 2>/dev/null; then
          echo "Push bem-sucedido para branch existente $CURRENT_BRANCH"
        else
          echo "Tentando configurar upstream para branch $CURRENT_BRANCH"
          git push --set-upstream origin $CURRENT_BRANCH
        fi
  open-pr:
    name: Open PR
    environment: ${{ github.ref_name }}
    runs-on: "ubuntu-latest"
    needs: generate-versionament
    steps:

#    - name: Instalar GitHub CLI (gh)
#      run: |
#        sudo yum install -y yum-utils
#        sudo yum-config-manager --add-repo https://cli.github.com/packages/rpm/gh-cli.repo
#        sudo yum install -y gh
#        gh --version


    - name: Create Pull Request
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      id: create_pr
      run: |
        PR_URL=$(gh pr create \
          --base ${{ github.ref_name }} \
          --repo ${{ github.repository }} \
          --head delivery/${{ github.ref_name }} \
          --title "ðŸš€ Release Automation[${{ github.ref_name }}]: ${{ inputs.versionament }}" \
          --body "## ðŸš€ Automated Release Update
    
        ### VersÃ£o: \`${{ inputs.versionament }}\`
    
        Esta Pull Request foi gerada automaticamente pelo pipeline de CD e contÃ©m:
    
        - âœ… AtualizaÃ§Ã£o de versÃ£o para \`${{ inputs.versionament }}\`
        - âœ… ConfiguraÃ§Ãµes atualizadas para implantaÃ§Ã£o
        - âœ… Artefatos prontos para produÃ§Ã£o
        
        ---
        *Gerado por GitHub Actions em $(date -u +"%Y-%m-%dT%H:%M:%SZ")*")
        
        echo "PR_URL=$PR_URL" >> $GITHUB_OUTPUT
        
        # Extrair o nÃºmero do PR do URL
        PR_NUMBER=$(echo $PR_URL | sed -E 's|.*/pull/([0-9]+).*|\1|')
        echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_OUTPUT
        
        echo "Pull Request criado: $PR_URL (PR #$PR_NUMBER)"
        

    - name: Notify Discord Webhook
      if: steps.create_pr.outputs.PR_NUMBER != ''
      run: |
        # Criar um arquivo temporÃ¡rio com o JSON
        cat > discord_payload.json << EOF
        {
          "embeds": [
            {
              "title": "ðŸš€ Nova Pull Request de Release Criada",
              "description": "Uma nova PR de release foi criada automaticamente pelo pipeline de CD.",
              "color": 3447003,
              "fields": [
                {
                  "name": "RepositÃ³rio",
                  "value": "${{ github.repository }}",
                  "inline": true
                },
                {
                  "name": "PR #",
                  "value": "[#${{ steps.create_pr.outputs.PR_NUMBER }}](${{ steps.create_pr.outputs.PR_URL }})",
                  "inline": true
                },
                {
                  "name": "Branch",
                  "value": "${{ github.ref_name }}",
                  "inline": true
                },
                {
                  "name": "VersÃ£o",
                  "value": "${{ needs.generate-versionament.outputs.version }}",
                  "inline": true
                },
                {
                  "name": "Hash",
                  "value": "${{ needs.generate-hash.outputs.content }}",
                  "inline": true
                }
              ],
              "footer": {
                "text": "GitHub Actions CD Pipeline â€¢ $(date -u +"%Y-%m-%d %H:%M UTC")"
              }
            }
          ]
        }
        EOF
        
        # Enviar o arquivo para o webhook
        curl -X POST ${{ secrets.DISCORD_NOTIFIER_URL }} \
          -H "Content-Type: application/json" \
          -d @discord_payload.json