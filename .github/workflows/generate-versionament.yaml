name: Versionament

on:
  workflow_call:
    inputs:
      terraform_directory:
        required: false
        type: string
        default: ''

jobs:
  generate-versionament:
    name: Generate
    environment: ${{ github.ref_name }}
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.create-branch.outputs.branch_name }}
    steps:
    - name: Checkout branch
      uses: actions/checkout@v4
      with:
        ref: "${{ github.ref_name }}"
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ fromJson(vars.AWS_ACCOUNTS).s4s[github.ref_name] }}:role/github-actions-role
        role-session-name: github-actions-role
        aws-region: 'us-east-1'

    - name: "Generate Terraform file"
      shell: bash
      run: |
        # Buscar parâmetros diretamente e processar em um único passo
        aws ssm get-parameters-by-path --path "/versions/${{ github.event.repository.name }}/" --recursive --with-decryption --region us-east-1 > parameters.json
        
        # Iniciar o arquivo Terraform
        echo 'variable "versionament" {' > versions.tf
        echo '  type = object({' >> versions.tf
        
        # Processar os parâmetros para gerar as definições de tipo
        jq -r '.Parameters[] | .Name' parameters.json | while read -r name; do
        # Extrair o sufixo do nome (após a última barra)
        suffix=$(echo "$name" | awk -F'/' '{print $NF}')
        echo "    $suffix = string" >> versions.tf
        done
        
        echo '  })' >> versions.tf
        echo '  default = {' >> versions.tf
        
        # Processar os parâmetros para gerar os valores padrão
        jq -r '.Parameters[] | .Name + "=" + .Value' parameters.json | while read -r line; do
        # Extrair o sufixo do nome e o valor
        name=$(echo "$line" | cut -d'=' -f1)
        value=$(echo "$line" | cut -d'=' -f2-)
        suffix=$(echo "$name" | awk -F'/' '{print $NF}')
        echo "    $suffix = \"$value\"" >> versions.tf
        done
        
        echo '  }' >> versions.tf
        echo '}' >> versions.tf

    - name: "Move Terraform file"
      shell: bash
      if: ${{ inputs.terraform_directory != '' }}
      run: mv versions.tf "${{ inputs.terraform_directory }}/versions.tf"

    - name: Create branch with inverted timestamp
      id: create-branch
      shell: bash
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
        TIMESTAMP=$(date -u +"%Y%m%d_%H%M%S")
        INVERTED_TIMESTAMP=$(echo $TIMESTAMP | tr '_' '-')
        BRANCH_NAME="release-${INVERTED_TIMESTAMP}"
        
        git checkout -b $BRANCH_NAME
        git add terraform/versions.tf
        git commit -m "Update versions.tf with latest parameter values"
        git push origin $BRANCH_NAME
        echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
        echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
        

  open-pr-:
    name: Open PR
    environment: ${{ github.ref_name }}
    runs-on: ubuntu-latest
    needs: generate-versionament
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v7
      with:
        commit-message: update release branch
        title: Update Release
        base: ${{ github.ref_name }}
        body: Credit new contributors by updating
        branch: ${{ needs.generate-versionament.outputs.branch_name }}
        token: '${{ secrets.GITHUB_TOKEN }}'