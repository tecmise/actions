name: Building Go

on:
  workflow_call:
    inputs:
      runner_name:
        required: true
        type: string
      runner_category:
        required: true
        type: string
      go_version:
        required: false
        type: string
        default: '^1.21'
      is_lambda:
        required: false
        type: boolean
        default: false
      artifact_name:
        required: true
        type: string
      artifact_main_path:
        required: true
        type: string
      aws_region:
        required: false
        type: string
        default: 'us-east-1'
    outputs:
      md5:
        description: "MD5 checksum of the built artifact"
        value: ${{ jobs.building.outputs.md5 }}

jobs:

  verify-files:
    name: Verify Files
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.check_version.outputs.has_changes }}
      hashcode: ${{ steps.generate_hash.outputs.content }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Checkout script repository
      uses: actions/checkout@v4
      with:
        repository: 'tecmise/actions'
        path: code

    - id: generate_hash
      name: Generate Hash Token
      run: |
        
        JSON_CONFIG=$(cat << EOF
        {
          "ignore_path": ["terraform", ".github", ".idea", ".git", ".gitignore"],
          "source": "."
        }
        EOF
        )
        hash=$(python code/.github/scripts/md5_calculator.py "$JSON_CONFIG")
        echo "content=$hash" >> $GITHUB_OUTPUT

    - name: Remove code directory
      run: rm -rf code

    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v4
      if: ${{ inputs.runner_category == 's4s' }}
      with:
        role-to-assume: arn:aws:iam::${{ fromJson(vars.AWS_ACCOUNTS).s4s[github.ref_name] }}:role/github-actions-role
        role-session-name: github-actions-role
        aws-region: ${{ inputs.aws_region }}

    - name: "Get parameters from SSM"
      id: last_version
      run: |
        # Salvar a saída do comando em um arquivo
        aws ssm get-parameters-by-path --path "/versions/${{ github.event.repository.name }}" --region us-east-1 > parameters.json
        
        # Exibir o conteúdo para debug
        cat parameters.json
        
        # Escapar corretamente o conteúdo para o GITHUB_OUTPUT
        # Usando a sintaxe de delimitador para valores multilinhas do GitHub Actions
        echo "content<<EOF" >> $GITHUB_OUTPUT
        cat parameters.json >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT


    - name: "Check if parameters are empty or different from hash"
      id: check_version
      run: |
        CURRENT_HASH="${{ steps.generate_hash.outputs.content }}"
        echo "Current hash: $CURRENT_HASH"
        
        # Construir o nome completo do parâmetro que estamos procurando
        PARAM_NAME="/versions/${{ github.event.repository.name }}/hashcode"
        echo "Looking for parameter: $PARAM_NAME"
        
        # Verificar se o parâmetro existe usando jq
        PARAM_EXISTS=$(jq --arg name "$PARAM_NAME" '.Parameters[] | select(.Name == $name) | length' parameters.json 2>/dev/null || echo "0")
        
        if [ "$PARAM_EXISTS" == "0" ] || [ -z "$PARAM_EXISTS" ]; then
          echo "Parameter $PARAM_NAME not found, setting has_changes=true"
          echo "has_changes=true" >> $GITHUB_OUTPUT
        else
          # Obter o valor do parâmetro específico
          PARAM_VALUE=$(jq --arg name "$PARAM_NAME" -r '.Parameters[] | select(.Name == $name) | .Value' parameters.json)
          echo "Parameter value: $PARAM_VALUE"
          
          # Comparar com o hash atual
          if [ "$PARAM_VALUE" == "$CURRENT_HASH" ]; then
            echo "No changes detected, setting has_changes=false"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected, setting has_changes=true"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
        fi

  building:
    name: Building
    environment: ${{ github.ref_name }}
    needs: verify-files
    if: ${{ needs.verify-files.outputs.has_changes == 'true' }}
    runs-on: ['${{ inputs.runner_name }}', '${{ inputs.runner_category }}', "self-hosted", "linux", "x64", "amazon"]
    env:
      GO111MODULE: on
      GOPROXY: direct
      GOSUMDB: off
    outputs:
      md5: ${{ steps.calculate-md5.outputs.md5 }}
      hashcode: ${{ needs.verify-files.outputs.hashcode }}
      has_changes: ${{ needs.verify-files.outputs.has_changes }}
    steps:

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go_version }}
          cache: false

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Tidy
        run: go mod tidy

      - name: Download dependencies
        run: go mod download

      - name: Build Container
        if: inputs.is_lambda != true
        run: |
          go mod verify
          go mod vendor
          GOOS=linux go build -a -buildvcs=false -installsuffix cgo -o ${{ inputs.artifact_name }} ${{ inputs.artifact_main_path }}

      - name: Build Lambda
        if: inputs.is_lambda == true
        run: |
          GOOS=linux GOARCH=arm64 go build -tags lambda.norpc -ldflags "-X config.Sha=${{ github.sha }}" -o ${{ inputs.artifact_name }} ${{ inputs.artifact_main_path }}

      - name: Calculate MD5
        id: calculate-md5
        run: |
          MD5=$(md5sum ${{ inputs.artifact_name }} | cut -d ' ' -f 1)
          echo "md5=$MD5" >> "$GITHUB_OUTPUT"

      - name: Set Extended Attributes
        run: |
          setfattr -n user.application -v "${{ github.event.repository.name }}" ${{ inputs.artifact_name }}
          setfattr -n user.artifact -v "${{ inputs.artifact_name }}" ${{ inputs.artifact_name }}
          setfattr -n user.sha -v "${{ github.sha }}" ${{ inputs.artifact_name }}
          setfattr -n user.md5 -v "${{ steps.calculate-md5.outputs.md5 }}" ${{ inputs.artifact_name }}
          setfattr -n user.build_time -v "$(date -u +'%Y-%m-%dT%H:%M:%SZ')" ${{ inputs.artifact_name }}
          setfattr -n user.build_by -v "${{ github.actor }}" ${{ inputs.artifact_name }}
          setfattr -n user.ref -v "${{ github.ref_name }}" ${{ inputs.artifact_name }}

      - name: Rename
        if: inputs.is_lambda == true
        run: |
          mv ${{ inputs.artifact_name }} bootstrap
          chmod +x bootstrap

      - name: Zip the artifact-builded folder
        if: inputs.is_lambda == true
        run: |
          zip -r artifact-builded.zip bootstrap
          mv artifact-builded.zip ${{ inputs.artifact_name }}.zip

      - name: upload artifact
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: ${{ inputs.artifact_name }}
          path: ${{ inputs.artifact_name }}.zip

  publishing:
    name: Publish
    environment: ${{ github.ref_name }}
    runs-on: 'ubuntu-latest'
    if: ${{ needs.building.outputs.has_changes == 'true' }}
    needs:
      - building
    steps:
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        if: ${{ inputs.runner_category == 's4s' }}
        with:
          role-to-assume: arn:aws:iam::${{ fromJson(vars.AWS_ACCOUNTS).s4s[github.ref_name] }}:role/github-actions-role
          role-session-name: github-actions-role
          aws-region: ${{ inputs.aws_region }}

      - name: Put parameter in SSM Parameter Store
        run: |
          aws ssm put-parameter --name "/versions/${{ github.event.repository.name }}/hashcode" --value "${{ needs.building.outputs.hashcode }}" --type String --overwrite

      - name: download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact_name }}

      - name: Upload artifact to S3
        if: ${{ inputs.runner_category == 's4s' }}
        run: aws s3 cp ${{ inputs.artifact_name }}.zip s3://${{ fromJson(vars.AWS_BUCKETS_LAMBDA).s4s[github.ref_name] }}/${{ github.event.repository.name }}/${{ needs.building.outputs.hashcode }}/${{ inputs.artifact_name }}.zip
